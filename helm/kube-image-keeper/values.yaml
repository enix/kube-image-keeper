# Default values for kube-image-keeper.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Delay in days before deleting an unused CachedImage
cachedImagesExpiryDelay: 30
# -- List of architectures to put in cache
architectures: [amd64]
# -- Insecure registries to allow to cache and proxify images from
insecureRegistries: []
# -- Root certificate authorities to trust
rootCertificateAuthorities: {}
  # secretName: some-secret
  # keys: []

controllers:
  # Maximum number of CachedImages that can be handled and reconciled at the same time (put or remove from cache)
  maxConcurrentCachedImageReconciles: 3
  # -- Number of controllers
  replicas: 2
  image:
    # -- Controller image repository. Also available: `quay.io/enix/kube-image-keeper`
    repository: ghcr.io/enix/kube-image-keeper
    # -- Controller image pull policy
    pullPolicy: IfNotPresent
    # -- Controller image tag. Default chart appVersion
    tag: ""
  # -- Controller logging verbosity
  verbosity: INFO
  # -- Specify secrets to be used when pulling controller image
  imagePullSecrets: []
  # -- Annotations to add to the controller pod
  podAnnotations: {}
  # -- Security context for the controller pod
  podSecurityContext: {}
  # -- Security context for containers of the controller pod
  securityContext: {}
  # -- Node selector for the controller pod
  nodeSelector: {}
  # -- Toleration for the controller pod
  tolerations: []
  # -- Set the PriorityClassName for the controller pod
  priorityClassName: ""
  pdb:
    # -- Create a PodDisruptionBudget for the controllers
    create: false
    # -- Minimum available pods
    minAvailable: 1
    # -- Maximum unavailable pods
    maxUnavailable: ""
  # -- Affinity for the controller pod
  affinity: {}
  # -- Extra env variables for the controllers pod
  env: []
  # -- Readiness probe definition for the controllers pod
  readinessProbe:
    httpGet:
      path: /readyz
      port: 8081
  # -- Liveness probe definition for the controllers pod
  livenessProbe:
    httpGet:
      path: /healthz
      port: 8081
  resources:
    requests:
      # -- Cpu requests for the controller pod
      cpu: "50m"
      # -- Memory requests for the controller pod
      memory: "50Mi"
    limits:
      # -- Cpu limits for the controller pod
      cpu: "1"
      # -- Memory limits for the controller pod
      memory: "512Mi"
  webhook:
    # -- Don't enable image caching for pods scheduled into these namespaces
    ignoredNamespaces: []
    # -- Don't enable image caching if the image match the following regexes
    ignoredImages: []
    # -- Don't enable image caching if the image is configured with imagePullPolicy: Always
    ignorePullPolicyAlways: true
    # -- If true, create the issuer used to issue the webhook certificate
    createCertificateIssuer: true
    # -- Issuer reference to issue the webhook certificate, ignored if createCertificateIssuer is true
    certificateIssuerRef:
      kind: Issuer
      name: kube-image-keeper-selfsigned-issuer
    objectSelector:
      # -- Run the webhook if the object has matching labels. (See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#labelselectorrequirement-v1-meta)
      matchExpressions: []
  podMonitor:
    # -- Should a PodMonitor object be installed to scrape kuik controller metrics. For prometheus-operator (kube-prometheus) users.
    create: false
    # -- Target scrape interval set in the PodMonitor
    scrapeInterval: 60s
    # -- Target scrape timeout set in the PodMonitor
    scrapeTimeout: 30s
    # -- Additional labels to add to PodMonitor objects
    extraLabels: {}
    # -- Relabel config for the PodMonitor, see: https://coreos.com/operators/prometheus/docs/latest/api.html#relabelconfig
    relabelings: []

proxy:
  image:
    # -- Proxy image repository. Also available: `quay.io/enix/kube-image-keeper`
    repository: ghcr.io/enix/kube-image-keeper
    # -- Proxy image pull policy
    pullPolicy: IfNotPresent
    # -- Proxy image tag. Default chart appVersion
    tag: ""
  # -- whether to run the proxy daemonset in hostNetwork mode
  hostNetwork: false
  # -- hostPort used for the proxy pod
  hostPort: 7439
  # -- hostIp used for the proxy pod
  hostIp: "127.0.0.1"
  # -- metricsPort used for the proxy pod (to expose prometheus metrics)
  metricsPort: 8080
  # -- Verbosity level for the proxy pod
  verbosity: 1
  # -- Specify secrets to be used when pulling proxy image
  imagePullSecrets: []
  # -- Annotations to add to the proxy pod
  podAnnotations: {}
  # -- Security context for the proxy pod
  podSecurityContext: {}
  # -- Security context for containers of the proxy pod
  securityContext: {}
  # -- Node selector for the proxy pod
  nodeSelector: {}
  # -- Toleration for the proxy pod
  tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
  # -- Set the PriorityClassName for the proxy pod
  priorityClassName: system-node-critical
  # -- Affinity for the proxy pod
  affinity: {}
  # -- Extra env variables for the proxy pod
  env: []
  # -- Readiness probe definition for the proxy pod
  readinessProbe:
    httpGet:
      path: /readyz
      port: 7439
  # -- Liveness probe definition for the proxy pod
  livenessProbe:
    httpGet:
      path: /healthz
      port: 7439
  resources:
    requests:
      # -- Cpu requests for the proxy pod
      cpu: "50m"
      # -- Memory requests for the proxy pod
      memory: "50Mi"
    limits:
      # -- Cpu limits for the proxy pod
      cpu: "1"
      # -- Memory limits for the proxy pod
      memory: "512Mi"
  podMonitor:
    # -- Should a PodMonitor object be installed to scrape kuik proxy metrics. For prometheus-operator (kube-prometheus) users.
    create: false
    # -- Target scrape interval set in the PodMonitor
    scrapeInterval: 60s
    # -- Target scrape timeout set in the PodMonitor
    scrapeTimeout: 30s
    # -- Additional labels to add to PodMonitor objects
    extraLabels: {}
    # -- Relabel config for the PodMonitor, see: https://coreos.com/operators/prometheus/docs/latest/api.html#relabelconfig
    relabelings: []
  kubeApiRateLimits: {}
    # -- Try higher values if there's a lot of CRDs installed in the cluster and proxy start takes a long time because of throttling
    # qps: 5
    # burst: 10

registry:
  image:
    # -- Registry image repository
    repository: registry
    # -- Registry image pull policy
    pullPolicy: IfNotPresent
    # -- Registry image tag
    tag: "2.8"
  # -- Number of replicas for the registry pod
  replicas: 1
  persistence:
    # -- AccessMode for persistent volume
    accessModes: ReadWriteOnce
    # -- If true, enable persistent storage (ignored when using minio or S3)
    enabled: false
    # -- StorageClass for persistent volume
    storageClass: null
    # -- Registry persistent volume size
    size: 20Gi
    # -- External S3 configuration (needed only if you don't enable minio) (see https://github.com/docker/docs/blob/main/registry/storage-drivers/s3.md)
    s3: {}
    s3ExistingSecret: ""
    # -- Disable blobs redirection to S3 bucket (useful if your S3 instance is not accessible from kubelet)
    disableS3Redirections: false
  garbageCollection:
    # -- Garbage collector cron schedule. Use standard crontab format.
    schedule: "0 0 * * 0"
    # -- If true, delete untagged manifests. Default to false since there is a known bug in **docker distribution** garbage collect job.
    deleteUntagged: false
    image:
      # -- Cronjob image repository
      repository: bitnami/kubectl
      # -- Cronjob image pull policy
      pullPolicy: IfNotPresent
      # -- Cronjob image tag. Default 'latest'
      tag: "latest"
  service:
    # -- Registry service type
    type: ClusterIP
  # -- A secret used to sign state that may be stored with the client to protect against tampering, generated if empty (see https://github.com/distribution/distribution/blob/main/docs/configuration.md#http)
  httpSecret: ""
  # -- Extra env variables for the registry pod
  env: []
  # -- Readiness probe definition for the registry pod
  readinessProbe:
    httpGet:
      path: /v2/
      port: 5000
    # -- Liveness probe definition for the proxy pod
  livenessProbe:
    httpGet:
      path: /v2/
      port: 5000
  resources:
    requests:
      # -- Cpu requests for the registry pod
      cpu: "50m"
      # -- Memory requests for the registry pod
      memory: "256Mi"
    limits:
      # -- Cpu limits for the registry pod
      cpu: "1"
      # -- Memory limits for the registry pod
      memory: "1Gi"
  # -- Specify secrets to be used when pulling registry image
  imagePullSecrets: []
  # -- Annotations to add to the registry pod
  podAnnotations: {}
  # -- Security context for the registry pod
  podSecurityContext: {}
  # -- Security context for containers of the registry pod
  securityContext: {}
  # -- Node selector for the registry pod
  nodeSelector: {}
  # -- Toleration for the registry pod
  tolerations: []
  # -- Set the PriorityClassName for the registry pod
  priorityClassName: ""
  # -- Affinity for the registry pod
  affinity: {}
  pdb:
    # -- Create a PodDisruptionBudget for the registry
    create: false
    # -- Minimum available pods
    minAvailable: 1
    # -- Maximum unavailable pods
    maxUnavailable: ""
  serviceMonitor:
    # -- Should a ServiceMonitor object be installed to  scrape kuik registry metrics. For prometheus-operator (kube-prometheus) users.
    create: false
    # -- Target scrape interval set in the ServiceMonitor
    scrapeInterval: 60s
    # -- Target scrape timeout set in the ServiceMonitor
    scrapeTimeout: 30s
    # -- Additional labels to add to ServiceMonitor objects
    extraLabels: {}
    # -- Relabel config for the ServiceMonitor, see: https://coreos.com/operators/prometheus/docs/latest/api.html#relabelconfig
    relabelings: []
  serviceAccount:
    # -- Annotations to add to the servicateAccount
    annotations: {}

registryUI:
  # -- If true, enable the registry user interface
  enabled: false
  image:
    # -- Registry UI image repository
    repository: parabuzzle/craneoperator
    # -- Registry UI image pull policy
    pullPolicy: IfNotPresent
    # -- Registry UI image tag
    tag: "2.2.5"
  auth:
    # -- Registry UI username
    username: "admin"
    # -- Registry UI password
    password: ""
  # -- CPU / Memory resources requests / limits for the registry UI pod
  resources: {}
  # -- Specify secrets to be used when pulling registry UI image
  imagePullSecrets: []
  # -- Annotations to add to the registry UI pod
  podAnnotations: {}
  # -- Security context for the registry UI pod
  podSecurityContext: {}
  # -- Security context for containers of the registry UI pod
  securityContext: {}
  # -- Node selector for the registry UI pod
  nodeSelector: {}
  # -- Toleration for the registry UI pod
  tolerations: []
  # -- Affinity for the registry UI pod
  affinity: {}

minio:
  # -- If true, install minio as a local storage backend for the registry
  enabled: false
  fullnameOverride: "kube-image-keeper-minio"
  mode: distributed
  provisioning:
    enabled: true
    buckets:
      - name: registry
    usersExistingSecrets:
      - kube-image-keeper-minio-registry-users
    extraVolumes:
      - name: registry-keys
        secret:
          defaultMode: 420
          secretName: kube-image-keeper-s3-registry-keys
    extraVolumeMounts:
      - name: registry-keys
        mountPath: /opt/bitnami/minio/svcacct/registry/
    extraCommands:
      - |
        (mc admin user svcacct info provisioning $(cat /opt/bitnami/minio/svcacct/registry/accessKey) 2> /dev/null ||
        mc admin user svcacct add
        --access-key "$(cat /opt/bitnami/minio/svcacct/registry/accessKey)"
        --secret-key "$(cat /opt/bitnami/minio/svcacct/registry/secretKey)"
        provisioning registry) > /dev/null

serviceAccount:
  # -- Annotations to add to the servicateAccount
  annotations: {}
  # -- Name of the serviceAccount
  name: ""

psp:
  # -- If True, create the PodSecurityPolicy
  create: false
