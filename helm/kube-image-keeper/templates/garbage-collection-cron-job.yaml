{{- if and .Values.registry.garbageCollection.schedule (or .Values.registry.persistence.enabled (eq (include "kube-image-keeper.registry-stateless-mode" .) "true")) }}
{{- if semverCompare ">=1.21-0" (default .Capabilities.KubeVersion.Version .Values.kubeVersion) -}}
apiVersion: batch/v1
{{- else -}}
apiVersion: batch/v1beta1
{{- end }}
kind: CronJob
metadata:
  name: {{ include "kube-image-keeper.fullname" . }}-registry-garbage-collection
  labels:
    {{- include "kube-image-keeper.garbage-collection-labels" . | nindent 4 }}
spec:
  concurrencyPolicy: Forbid
  schedule: "{{ .Values.registry.garbageCollection.schedule }}"
  jobTemplate:
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: {{ .Values.registry.garbageCollection.activeDeadlineSeconds }}
      template:
        spec:
          {{- with .Values.registry.garbageCollection.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          serviceAccountName: {{ include "kube-image-keeper.fullname" . }}-registry-restart
          restartPolicy: Never
          {{- with .Values.registry.garbageCollection.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.registry.garbageCollection.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.registry.garbageCollection.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          securityContext:
            {{- toYaml .Values.registry.garbageCollection.podSecurityContext | nindent 12 }}
          containers:
            - name: kubectl
              securityContext:
                {{- toYaml .Values.registry.garbageCollection.securityContext | nindent 16 }}
              image: "{{ .Values.registry.garbageCollection.image.repository }}:{{ .Values.registry.garbageCollection.image.tag }}"
              resources:
                {{- toYaml .Values.registry.garbageCollection.resources | nindent 16 }}
              imagePullPolicy: {{ .Values.registry.garbageCollection.image.pullPolicy }}
              command:
                - bash
                - -c
                - |
                  set -e
                  {{- if eq (include "kube-image-keeper.registry-stateless-mode" .) "true" }}
                  kubectl set env deploy {{ include "kube-image-keeper.fullname" . }}-registry REGISTRY_STORAGE_MAINTENANCE_READONLY="{\"enabled\":true}"

                  # wait for deployment to berolled out and terminated pods to be deleted to prevent execâ€™ing into a terminating pod (see https://binx.io/2022/01/18/how-to-run-a-post-deployment-script-on-kubernetes/)
                  kubectl rollout status deploy {{ include "kube-image-keeper.fullname" . }}-registry
                  SELECTOR=$(kubectl get deploy {{ include "kube-image-keeper.fullname" . }}-registry -o wide --no-headers | awk '{print $NF}')
                  while [[ $(kubectl get pods --selector ${SELECTOR} --no-headers | awk '{print $3}' | uniq) != "Running" ]]; do
                    echo "waiting for terminating pods to be deleted"
                    sleep 1
                  done

                  kubectl exec deploy/{{ include "kube-image-keeper.fullname" . }}-registry -- bin/registry garbage-collect /etc/docker/registry/config.yml --delete-untagged={{ .Values.registry.garbageCollection.deleteUntagged }}
                  kubectl set env deploy {{ include "kube-image-keeper.fullname" . }}-registry REGISTRY_STORAGE_MAINTENANCE_READONLY-
                  {{- else }}
                  kubectl rollout restart sts {{ include "kube-image-keeper.fullname" . }}-registry
                  kubectl rollout status sts {{ include "kube-image-keeper.fullname" . }}-registry
                  {{- end }}
{{- end }}
