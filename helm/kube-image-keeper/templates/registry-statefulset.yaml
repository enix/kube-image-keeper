{{- if eq (include "kube-image-keeper.registry-stateless-mode" .) "false" }}

{{- if and (gt (int .Values.registry.replicas) 1) (ne .Values.registry.persistence.accessModes "ReadWriteMany") -}}
{{ fail "registry needs a configured S3 endpoint or a PVC which supports ReadWriteMany to enable HA mode (>1 replicas), please enable minio or configure an external S3 endpoint" }}
{{- end }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "kube-image-keeper.fullname" . }}-registry
  labels:
    {{- include "kube-image-keeper.registry-labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.registry.replicas }}
  serviceName: {{ include "kube-image-keeper.fullname" . }}-registry
  selector:
    matchLabels:
      {{- include "kube-image-keeper.registry-selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.registry.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "kube-image-keeper.registry-selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.registry.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.registry.priorityClassName }}
      priorityClassName: {{ .Values.registry.priorityClassName | quote }}
      {{- end }}
      serviceAccountName: {{ include "kube-image-keeper.fullname" . }}-registry
      securityContext:
        {{- toYaml .Values.registry.podSecurityContext | nindent 8 }}
      {{- if .Values.registry.persistence.enabled }}
      initContainers:
        - name: setup-dirs
          image: "{{ .Values.registry.image.repository }}:{{ .Values.registry.image.tag }}"
          imagePullPolicy: {{ .Values.registry.image.pullPolicy }}
          command:
            - mkdir
            - -p
            - /var/lib/registry/docker/registry/v2/repositories/
            - /var/lib/registry/docker/registry/v2/blobs/
          resources:
            {{- toYaml .Values.registry.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /var/lib/registry
              name: data
        - name: garbage-collector
          image: "{{ .Values.registry.image.repository }}:{{ .Values.registry.image.tag }}"
          imagePullPolicy: {{ .Values.registry.image.pullPolicy }}
          command:
            - bin/registry
            - garbage-collect
            - /etc/docker/registry/config.yml
            - --delete-untagged={{ .Values.registry.garbageCollection.deleteUntagged }}
          resources:
            {{- toYaml .Values.registry.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /var/lib/registry
              name: data
      {{- end }}
      containers:
        - name: registry
          securityContext:
            {{- toYaml .Values.registry.securityContext | nindent 12 }}
          image: "{{ .Values.registry.image.repository }}:{{ .Values.registry.image.tag }}"
          imagePullPolicy: {{ .Values.registry.image.pullPolicy }}
          ports:
            - containerPort: 5000
              protocol: TCP
          resources:
            {{- toYaml .Values.registry.resources | nindent 12 }}
          env:
            - name: REGISTRY_STORAGE_DELETE_ENABLED
              value: "true"
            {{- if .Values.registry.serviceMonitor.create }}
            - name: REGISTRY_HTTP_DEBUG_ADDR
              value: 0.0.0.0:5001
            - name: REGISTRY_HTTP_DEBUG_PROMETHEUS_ENABLED
              value: "true"
            {{- end }}
            {{- range .Values.registry.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          {{- if .Values.registry.persistence.enabled }}
          volumeMounts:
            - mountPath: /var/lib/registry
              name: data
          {{- end }}
          {{- with .Values.registry.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.registry.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.registry.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.registry.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.registry.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if and (.Values.registry.persistence.enabled) (ne .Values.registry.persistence.accessModes "ReadWriteMany") }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - {{ .Values.registry.persistence.accessModes }}
      storageClassName: {{ .Values.registry.persistence.storageClass }}
      resources:
        requests:
          storage: {{ .Values.registry.persistence.size }}
  {{- end }}
  {{- if and (.Values.registry.persistence.enabled) (eq .Values.registry.persistence.accessModes "ReadWriteMany") }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "kube-image-keeper.fullname" . }}-registry-pvc
  {{- end }}
{{- end }}
