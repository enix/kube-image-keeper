{{- if or .Values.minio.enabled (and (not (empty .Values.registry.persistence.s3)) (empty .Values.registry.persistence.s3ExistingSecret)) }}
apiVersion: v1
kind: Secret
metadata:
  name: kube-image-keeper-s3-registry-keys
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
stringData:
  {{- if .Values.minio.enabled }}
    {{- $secretName := "kube-image-keeper-s3-registry-keys" }}
    {{- $secretData := (get (lookup "v1" "Secret" .Release.Namespace $secretName) "data") | default dict }}
    # set $accessKey $secretKey to existing secret data or generate random ones when they do not exist
    {{- $accessKey := (get $secretData "accessKey" | b64dec) | default (randAlphaNum 16) }}
    {{- $secretKey := (get $secretData "secretKey" | b64dec) | default (randAlphaNum 32) }}
  accessKey: {{ $accessKey }}
  secretKey: {{ $secretKey }}
  {{- else }}
  accessKey: {{ .Values.registry.persistence.s3.accesskey }}
  secretKey: {{ .Values.registry.persistence.s3.secretkey }}
  {{- end }}
{{- end }}
